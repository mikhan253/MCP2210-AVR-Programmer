
usbmaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000001ba  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800080  00800080  0000026e  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000080  00000000  00000000  000002c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000006fe  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000005ca  00000000  00000000  00000a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000321  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  0000009c  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000003f0  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00000126  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000053  00000000  00000000  000018de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0

00000062 <.Loc.1>:
  62:	a0 e6       	ldi	r26, 0x60	; 96

00000064 <.Loc.2>:
  64:	b0 e0       	ldi	r27, 0x00	; 0

00000066 <.Loc.3>:
  66:	ea eb       	ldi	r30, 0xBA	; 186

00000068 <.Loc.4>:
  68:	f1 e0       	ldi	r31, 0x01	; 1

0000006a <.Loc.5>:
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.L__do_copy_data_start>

0000006c <.L__do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+

0000006e <.Loc.7>:
  6e:	0d 92       	st	X+, r0

00000070 <.L__do_copy_data_start>:
  70:	a0 38       	cpi	r26, 0x80	; 128

00000072 <.Loc.9>:
  72:	b1 07       	cpc	r27, r17

00000074 <.Loc.10>:
  74:	d9 f7       	brne	.-10     	; 0x6c <.L__do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0

00000078 <.Loc.1>:
  78:	a0 e8       	ldi	r26, 0x80	; 128

0000007a <.Loc.2>:
  7a:	b0 e0       	ldi	r27, 0x00	; 0

0000007c <.Loc.3>:
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.Loc.5>

0000007e <.Loc.4>:
  7e:	1d 92       	st	X+, r1

00000080 <.Loc.5>:
  80:	a4 3c       	cpi	r26, 0xC4	; 196

00000082 <.Loc.6>:
  82:	b2 07       	cpc	r27, r18

00000084 <.Loc.7>:
  84:	e1 f7       	brne	.-8      	; 0x7e <.Loc.4>

00000086 <L0^A>:
  86:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  8a:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DrvSPI_SlaveInit>:
volatile uint8_t DrvSPI_Datalen;
volatile uint8_t* pDrvSPI_Data;
volatile e_SPI_STATES DrvSPI_State;

void DrvSPI_SlaveInit()
{
  92:	cf 93       	push	r28

00000094 <.LCFI0>:
  94:	df 93       	push	r29

00000096 <.LCFI1>:
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62

0000009a <.LCFI2>:
    DDRB |= _BV(PB6);
  9a:	87 e3       	ldi	r24, 0x37	; 55
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	fc 01       	movw	r30, r24
  a0:	20 81       	ld	r18, Z
  a2:	87 e3       	ldi	r24, 0x37	; 55
  a4:	90 e0       	ldi	r25, 0x00	; 0

000000a6 <.Loc.2>:
  a6:	20 64       	ori	r18, 0x40	; 64
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18

000000ac <.Loc.3>:
    SPCR = _BV(SPIE) | _BV(SPE);
  ac:	8d e2       	ldi	r24, 0x2D	; 45
  ae:	90 e0       	ldi	r25, 0x00	; 0

000000b0 <.Loc.4>:
  b0:	20 ec       	ldi	r18, 0xC0	; 192
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18

000000b6 <.Loc.5>:
    DrvSPI_State = WAIT_FOR_CMD;
  b6:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <DrvSPI_State>

000000ba <.Loc.6>:
}
  ba:	00 00       	nop
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <main>:
/****************************************************************
 * MAIN                                                         *
 ****************************************************************/

int main(void)
{
  c2:	cf 93       	push	r28

000000c4 <.LCFI3>:
  c4:	df 93       	push	r29

000000c6 <.LCFI4>:
  c6:	0f 92       	push	r0

000000c8 <.LCFI5>:
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62

000000cc <.LCFI6>:
    uint8_t test=0;
  cc:	19 82       	std	Y+1, r1	; 0x01

000000ce <.Loc.9>:
    DrvSPI_SlaveInit();
  ce:	0e 94 49 00 	call	0x92	; 0x92 <DrvSPI_SlaveInit>

000000d2 <.Loc.10>:
    sei();
  d2:	78 94       	sei

000000d4 <.L3>:

    while(1)
        test++;
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	89 83       	std	Y+1, r24	; 0x01
  da:	fc cf       	rjmp	.-8      	; 0xd4 <.L3>

000000dc <__vector_12>:
}

ISR(SPI_STC_vect)
{
  dc:	1f 92       	push	r1

000000de <.LCFI7>:
  de:	0f 92       	push	r0

000000e0 <.LCFI8>:
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18

000000e8 <.LCFI9>:
  e8:	3f 93       	push	r19

000000ea <.LCFI10>:
  ea:	8f 93       	push	r24

000000ec <.LCFI11>:
  ec:	9f 93       	push	r25

000000ee <.LCFI12>:
  ee:	ef 93       	push	r30

000000f0 <.LCFI13>:
  f0:	ff 93       	push	r31

000000f2 <.LCFI14>:
  f2:	cf 93       	push	r28

000000f4 <.LCFI15>:
  f4:	df 93       	push	r29

000000f6 <.LCFI16>:
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62

000000fa <.LCFI17>:
    if(DrvSPI_State==WAIT_FOR_DATALEN)
  fa:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <DrvSPI_State>

000000fe <.Loc.14>:
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	49 f4       	brne	.+18     	; 0x114 <.L5>

00000102 <.Loc.15>:
    {
        DrvSPI_Datalen = SPDR;
 102:	8f e2       	ldi	r24, 0x2F	; 47
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	80 81       	ld	r24, Z

0000010a <.Loc.16>:
 10a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <DrvSPI_Datalen>

0000010e <.Loc.17>:
        DrvSPI_State = WAIT_FOR_DATA;
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <DrvSPI_State>

00000114 <.L5>:
    }
    if(DrvSPI_State==WAIT_FOR_DATA)
 114:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <DrvSPI_State>

00000118 <.Loc.19>:
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	01 f5       	brne	.+64     	; 0x15c <.L6>

0000011c <.Loc.20>:
    {
        if(DrvSPI_Datalen)
 11c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <DrvSPI_Datalen>

00000120 <.Loc.21>:
 120:	88 23       	and	r24, r24
 122:	31 f0       	breq	.+12     	; 0x130 <.L7>

00000124 <.Loc.22>:
            DrvSPI_Datalen--;
 124:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <DrvSPI_Datalen>
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <DrvSPI_Datalen>
 12e:	02 c0       	rjmp	.+4      	; 0x134 <.L8>

00000130 <.L7>:
        else
            DrvSPI_State = WAIT_FOR_CMD;
 130:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <DrvSPI_State>

00000134 <.L8>:
        SPDR = *pDrvSPI_Data;
 134:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <pDrvSPI_Data>
 138:	30 91 c2 00 	lds	r19, 0x00C2	; 0x8000c2 <pDrvSPI_Data+0x1>

0000013c <.Loc.25>:
 13c:	8f e2       	ldi	r24, 0x2F	; 47
 13e:	90 e0       	ldi	r25, 0x00	; 0

00000140 <.Loc.26>:
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z

00000144 <.Loc.27>:
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18

00000148 <.Loc.28>:
        pDrvSPI_Data++;
 148:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <pDrvSPI_Data>
 14c:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <pDrvSPI_Data+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <pDrvSPI_Data+0x1>
 156:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <pDrvSPI_Data>

0000015a <.Loc.29>:
        return;
 15a:	20 c0       	rjmp	.+64     	; 0x19c <.L4>

0000015c <.L6>:
    }
    if(DrvSPI_State==WAIT_FOR_CMD)
 15c:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <DrvSPI_State>

00000160 <.Loc.31>:
 160:	88 23       	and	r24, r24
 162:	e1 f4       	brne	.+56     	; 0x19c <.L4>

00000164 <.Loc.32>:
    {
        if((e_SPI_COMMANDS)SPDR == CMD_READ_DATA)
 164:	8f e2       	ldi	r24, 0x2F	; 47
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z

0000016c <.Loc.33>:
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	79 f4       	brne	.+30     	; 0x18e <.L10>

00000170 <.Loc.34>:
        {
            pDrvSPI_Data = Databuffer;
 170:	80 e6       	ldi	r24, 0x60	; 96
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <pDrvSPI_Data+0x1>
 178:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <pDrvSPI_Data>

0000017c <.Loc.35>:
            DrvSPI_State = WAIT_FOR_DATALEN;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <DrvSPI_State>

00000182 <.Loc.36>:
            SPDR = DrvSPI_ACK;
 182:	8f e2       	ldi	r24, 0x2F	; 47
 184:	90 e0       	ldi	r25, 0x00	; 0

00000186 <.Loc.37>:
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	07 c0       	rjmp	.+14     	; 0x19c <.L4>

0000018e <.L10>:
        }
        else
        {
            SPDR = DrvSPI_NACK;
 18e:	8f e2       	ldi	r24, 0x2F	; 47
 190:	90 e0       	ldi	r25, 0x00	; 0

00000192 <.Loc.39>:
 192:	22 e0       	ldi	r18, 0x02	; 2
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18

00000198 <.Loc.40>:
            DrvSPI_State = WAIT_FOR_CMD;
 198:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <DrvSPI_State>

0000019c <.L4>:
        }
    }
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
